#IMPORTANT ONLY FOR 5 DAY LONG SCANNINGS WITH 3 ROOTS PER SECTOR; NO UNDERSCORES IN SET NAMES#Wolfgang Busch Dec 2011# script reads out good roots (based on infor from QC file)# extract good roots measurements from Quantification_REB_V5.0# orders similar roots of different timepoints# calculates growth rates for each day# works only for 1 digit root numbers# works currently per set# works with new width traitimport sysimport osimport timeimport datetimeimport numpy#specify path to directory with XY coordinates of roots from plates (Extract_XY_from_plate_data_V4.ijm output)path='/Volumes/busch/lab/20120111_MAGIC_Santosh_reprocessing/'QC_filename="20120112_skeleton_QC__V2_all.txt"quant_filename='2012-01-11_XY_width_coord_no_shoot_Quantification_REB_V6.5.txt'set="MAGIC"#specify date format for filename (1=day 1 ; 2=110404)date_format=1day1=110721#start outputtoday = datetime.date.today()outfilename=path+str(today)+set+"_curated_Quantification_REB_V7.5.txt"outfilename2=path+str(today)+set+"_curated_Quantification_REB_V7.5_processed.txt"outfilename3=path+str(today)+set+"_curated_Quantification_REB_V7.5_averaged.txt"outfilename4=path+str(today)+set+"_curated_Quantification_REB_V7.5_averaged_per_accession.txt"#filehandlingoutfile=open(outfilename, 'w')outfile.write("Analyzed_File\troot_number\tsanity_flag\troot_start_x\troot_start_y\troot_end_x\troot_end_y\tshort_root_length\troot_angle\tcounted_root_pixels\troot width\n")outfile2=open(outfilename2, 'w')QC_content=open(path+QC_filename, 'r')QC_file=QC_content.readlines()QC_content.close()quant_content=open(path+quant_filename, 'r')quant_file=quant_content.readlines()quant_content.close()image=[]good_roots_table=[]real_root_numbers=[]for line in QC_file:	line_content=line.split(',')	if (len(line_content)>1):		aar=line_content[1].strip('\n')		ar=aar.strip('\r')		if " " in ar:			gr=ar.split(' ')[0]			rr=ar.split(' ')[1]			img=line_content[0].strip('combined_noshootBinary_')			img=img.split('.')[0]			good_roots=list(gr)			real_roots=list(rr)			if len(good_roots) ==len(real_roots):				for element in range(0,len(good_roots)):					image.append(img)					good_roots_table.append(good_roots[element])					real_root_numbers.append(real_roots[element])acc_id=[]set=[]sector=[]plate=[]day=[]x_root_start=[]eucl_distance=[]angle=[]total_root_pixels=[]topology_ratio=[]root_real_name=[]root_width=[]for line in quant_file:	line_content=line.split('\t')	quant_filename=line_content[0]	quant_filename=quant_filename.strip('XY_width_coord_no_shoot_')	quant_filename=quant_filename.split('.')[0]	quant_root=line_content[1]	for element in range(0,len(image)):		if quant_filename == image[element] and quant_root == good_roots_table[element]:			outfile.write(line)			root_quant=line.split('\t')			tr_tmp=root_quant[0]			root_name_elements=tr_tmp.split("_")			acc_id.append(root_name_elements[5])			set.append(root_name_elements[6].strip('set'))			sector.append(root_name_elements[7].strip('sec'))			plate.append(root_name_elements[8].strip('pla'))			if date_format==1:				day.append((root_name_elements[9].strip('day')).strip('.bmp.txt'))			elif date_format==2:				day.append(int(root_name_elements[9].strip('.bmp.txt'))-day1)			x_root_start.append(root_quant[3])			eucl_distance.append(root_quant[7])			angle.append(root_quant[8])			total_root_pixels.append(root_quant[9])			root_width.append(root_quant[10])			root_real_name.append(real_root_numbers[element])			topology_ratio.append(str(float(root_quant[9])/float(root_quant[7])))parsed_table=zip(acc_id,set,sector,plate,day,root_real_name,x_root_start,eucl_distance,angle,total_root_pixels,topology_ratio,root_width)outfile2.write("acc_id\tset\tsector\tplate\tday\tindividual\tx_root_start\teucl_distance\tangle\ttotal_root_pixels\ttopology_ratio\troot width\n")for line in range(0,len(parsed_table)):	for elements in range(0,len(parsed_table[line])):		outfile2.write(str(parsed_table[line][elements]))		outfile2.write("\t")	outfile2.write("\n")outfile.close()outfile2.close()processed_lines=[]day_table=[]acquire_flag=0check_id=[]outfile3=open(outfilename3, 'w')from operator import itemgetterparsed_table_day_key=sorted(parsed_table, key=itemgetter(4))outfile3.write("ACC_ID\tPlate\tSector\tIndividual\tGRd1-d2\tGRd2-d3\tGRd3-d4\tGRd4-d5\tavgGR\n")#get values of growth rate per day / for 3 roots and 5 daysmax_day=5roots_per_section=3for line in range(0,len(parsed_table_day_key)):	print (line)	if (acquire_flag==1) and (current_acc_id+current_plate+current_sector+current_root_real_name) not in check_id:		outfile3.write(current_acc_id+"\t"+current_plate+"\t"+current_sector+"\t"+current_root_real_name+"\t")		check_id.append(current_acc_id+current_plate+current_sector+current_root_real_name)#		print (day_table)		if len(day_table)>4:			if (day_table[0] == '1' and day_table[1] == '2'):				outfile3.write(str(float(GR_total[1])-float(GR_total[0]))+"\t")				if (day_table[1] == '2' and day_table[2] == '3'):					outfile3.write(str(float(GR_total[2])-float(GR_total[1]))+"\t")					if (day_table[2] == '3' and day_table[3] == '4'):						outfile3.write(str(float(GR_total[3])-float(GR_total[2]))+"\t")						if (day_table[3] == '4' and day_table[4] == '5'):							outfile3.write(str(float(GR_total[4])-float(GR_total[3]))+"\t")							outfile3.write(str((float(GR_total[4])-float(GR_total[0]))/4))		elif len(day_table)>=2:			first_day=day_table[0]			last_day=day_table[len(day_table)-1]			if last_day> first_day:				avg_GR=(float(GR_total[len(day_table)-1])-float(GR_total[0]))/(int(last_day)-int(first_day))				outfile3.write("N.A.\tN.A.\tN.A.\tN.A.\t"+str(avg_GR))#		outfile3.write(str(len(GR_euc)))#		outfile3.write("\t")#		outfile3.write(str(numpy.mean(GR_euc)))#		outfile3.write("\t")#		outfile3.write(str(numpy.std(GR_euc)))#		outfile3.write("\t")#		outfile3.write(str(numpy.mean(GR_total)))#		outfile3.write("\t")#		outfile3.write(str(numpy.std(GR_total)))		outfile3.write("\n")		acquire_flag=0	if (line not in processed_lines):		replicates_eucl_distance=[]		replicates_angle=[]		replicates_total_root_pixels=[]		GR_total=[]		GR_euc=[]		day_table=[]		sum_eucl_distance=0		sum_angle=0		sum_total_root_pixels=0		replicates=1		current_set=parsed_table_day_key[line][1]		current_acc_id=parsed_table_day_key[line][0]		current_plate=parsed_table_day_key[line][3]		current_sector=parsed_table_day_key[line][2]		current_day=parsed_table_day_key[line][4]		current_root_real_name=parsed_table_day_key[line][5]		current_eucl_distance=parsed_table_day_key[line][7]		current_angle=parsed_table_day_key[line][8]		current_total_root_pixels=parsed_table_day_key[line][9]		for entry in range(0,len(parsed_table_day_key)):			if (current_set==parsed_table_day_key[entry][1] and current_acc_id==parsed_table_day_key[entry][0] and current_root_real_name==parsed_table_day_key[entry][5] and current_plate==parsed_table_day_key[entry][3]):				day_table.append(parsed_table_day_key[entry][4])				GR_euc.append(float(parsed_table_day_key[entry][7]))				GR_total.append(float(parsed_table_day_key[entry][7]))				#delta_day=int(parsed_table_day_key[element][4]) - int(current_day)				#GR_euc.append((float(parsed_table_day_key[entry][7])-float(current_eucl_distance))/delta_day)				#GR_total.append((float(parsed_table_day_key[entry][9])-float(current_total_root_pixels))/delta_day)				acquire_flag=1				processed_lines.append(entry)outfile3.close()# get the averages for accessionsoutfile3_content=open(outfilename3, 'r')out3_file=outfile3_content.readlines()outfile3_content.close()outfile4=open(outfilename4, 'w')outfile4.write("ACC_ID\tavg GR\tSTD avg GR\n")acquire_flag=0check_id=[]avgGR=[]for line in out3_file:	line_content=line.split('\t')	#print (line)	current_id=line_content[0]	if acquire_flag==1 and last_acc not in check_id and len(avgGR)>2:		outfile4.write(last_acc)		outfile4.write("\t")		outfile4.write(str(numpy.mean(avgGR)))		outfile4.write("\t")		outfile4.write(str(numpy.std(avgGR)))		outfile4.write("\n")		check_id.append(last_acc)		acquire_flag=0	avgGR=[]	for element in out3_file:		element_content=element.split('\t')		if current_id==element_content[0] and len(element_content)>8 and (element_content[8]) != 'avgGR\n' and (element_content[8]) > 1 and element_content[8] != 0:			GR=element_content[8].strip('\n')			avgGR.append(float(GR))			last_acc=current_id			acquire_flag=1			outfile4.close()